// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/taeho-io/idl/gen/go/slasher (interfaces: SlasherClient)

// Package slasher is a generated GoMock package.
package slasher

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	slasher "github.com/taeho-io/idl/gen/go/slasher"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSlasherClient is a mock of SlasherClient interface
type MockSlasherClient struct {
	ctrl     *gomock.Controller
	recorder *MockSlasherClientMockRecorder
}

// MockSlasherClientMockRecorder is the mock recorder for MockSlasherClient
type MockSlasherClientMockRecorder struct {
	mock *MockSlasherClient
}

// NewMockSlasherClient creates a new mock instance
func NewMockSlasherClient(ctrl *gomock.Controller) *MockSlasherClient {
	mock := &MockSlasherClient{ctrl: ctrl}
	mock.recorder = &MockSlasherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSlasherClient) EXPECT() *MockSlasherClientMockRecorder {
	return m.recorder
}

// Slash mocks base method
func (m *MockSlasherClient) Slash(arg0 context.Context, arg1 *slasher.SlashRequest, arg2 ...grpc.CallOption) (*slasher.SlashResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Slash", varargs...)
	ret0, _ := ret[0].(*slasher.SlashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Slash indicates an expected call of Slash
func (mr *MockSlasherClientMockRecorder) Slash(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slash", reflect.TypeOf((*MockSlasherClient)(nil).Slash), varargs...)
}
